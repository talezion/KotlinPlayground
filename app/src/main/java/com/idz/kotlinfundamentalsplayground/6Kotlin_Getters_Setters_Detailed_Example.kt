/**
 * In Kotlin, getters and setters are used to control how properties are accessed and modified.
 * The 'field' identifier can be used within a getter or setter to refer to the backing field of the property.
 * This file demonstrates various examples of getters and setters with different approaches, including the use of the @Deprecated annotation.
 */

class Wallet2(private var _balance: Double) {

    // Example of a simple custom getter and setter for wallet balance
    // Uses rounding in the getter and validates non-negative values in the setter
    var balance: Double = 0.0
        get() = "%.2f".format(_balance).toDouble() // Display balance rounded to two decimal places
        set(value) {
            if (value >= 0) field = value else println("Invalid balance value.")
        }

    // Short-form getter and setter (auto-generated by Kotlin)
    var walletType: String = "Standard"

    // Getter and setter in the long form, showing explicit get() and set(value) methods
    var ownerName: String = "Anonymous"
        get() = field // Explicit getter returns the field directly
        set(value) {
            println("Setting owner name to $value")
            field = value // Explicit setter sets the field to the provided value
        }

    // An example using the @Deprecated annotation to show deprecated properties
    @Deprecated("This property is deprecated, use 'balance' instead", ReplaceWith("balance"))
    var deprecatedBalance: Double
        get() = balance
        set(value) {
            balance = value
            println("Deprecated property setter called; new balance is $balance")
        }

    // Demonstrating the use of a private setter
    var address: String = "Not Set"
        get() = "Wallet Address: $field" // Formats the address when accessed
        private set // Restricts setting the address outside of the class

    // Custom function for updating the wallet balance with logging
    fun updateBalance(amount: Double) {
        if (amount >= 0) {
            _balance += amount
            println("Balance updated. New balance: $balance")
        } else {
            println("Cannot add a negative amount.")
        }
    }
}

fun main() {
    // Creating an instance of Wallet
    val wallet = Wallet2(1000.0)

    // Accessing the @Deprecated property
    wallet.deprecatedBalance = 1200.0 // Demonstrates the deprecated warning

    // Setting and getting various properties
   // wallet.address = "1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa" // Setting address initially
    //println(wallet.address) // Accessing formatted address

    // Accessing balance with getter and testing setter
    println("Initial Wallet Balance: ${wallet.balance}")
    wallet.updateBalance(250.0) // Updating balance with valid amount
    wallet.balance = -100.0 // Attempt to set invalid balance (validation example)

    // Testing the long form getter and setter with logging
    wallet.ownerName = "Alice"
    println("Owner Name: ${wallet.ownerName}")

    println("Final Wallet Balance: ${wallet.balance}")
}